name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push API Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          API_ECR_REPOSITORY: ${{ secrets.API_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          echo "API_ECR_REPOSITORY: $API_ECR_REPOSITORY"
          echo "API_ECR_REPOSITORY: $API_ECR_REPOSITORY"
          echo "ECR_REGISTRY: $ECR_REGISTRY"
          docker build -t $API_ECR_REPOSITORY:$IMAGE_TAG -f RocketFitBackend_Python/RocketFitDjango2/Dockerfile RocketFitBackend_Python/RocketFitDjango2
          docker tag $API_ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$API_ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push APP Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_ECR_REPOSITORY: ${{ secrets.APP_REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $APP_ECR_REPOSITORY:$IMAGE_TAG -f rocket-fit-front/client/Dockerfile rocket-fit-front/client
          docker tag $APP_ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$APP_ECR_REPOSITORY:$IMAGE_TAG
